{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src='{{ 'quick-add.js' | asset_url }}' defer='defer'></script>
  <script src='{{ 'product-form.js' | asset_url }}' defer='defer'></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src='{{ 'quick-add-bulk.js' | asset_url }}' defer='defer'></script>
  <script src='{{ 'quantity-popover.js' | asset_url }}' defer='defer'></script>
  <script src='{{ 'price-per-item.js' | asset_url }}' defer='defer'></script>
  <script src='{{ 'quick-order-list.js' | asset_url }}' defer='defer'></script>
{%- endif -%}

{%- style -%}
   .section-{{ section.id }}-padding {
     padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
     padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
   }

   @media screen and (min-width: 750px) {
     .section-{{ section.id }}-padding {
       padding-top: {{ section.settings.padding_top }}px;
       padding-bottom: {{ section.settings.padding_bottom }}px;
     }
   }
  .plp-actions {
  	display: none;
  }
{%- endstyle -%}

<div class='section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}'>
  {%- paginate collection.products by section.settings.products_per_page -%}
    {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' -%}
      <facet-filters-form class='facets facets-vertical-sort page-width small-hide'>
        <form class='facets-vertical-form' id='FacetSortForm'>
          <div class='facet-filters sorting caption'>
            <div class='facet-filters__field'>
              <h2 class='facet-filters__label caption-large text-body'>
                <label for='SortBy'>{{ 'products.facets.sort_by_label' | t }}</label>
              </h2>
              <div class='select'>
                {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                <select
                  name='sort_by'
                  class='facet-filters__sort select__select caption-large'
                  id='SortBy'
                  aria-describedby='a11y-refresh-page-message'
                >
                  {%- for option in collection.sort_options -%}
                    <option
                      value='{{ option.value | escape }}'
                      {% if option.value == sort_by %}
                        selected='selected'
                      {% endif %}
                    >
                      {{ option.name | escape }}
                    </option>
                  {%- endfor -%}
                </select>
                <span class='svg-wrapper'>
                  {{- 'icon-caret.svg' | inline_asset_content -}}
                </span>
              </div>
            </div>
          </div>

          <div class='product-count-vertical light' role='status'>
            <h2 class='product-count__text text-body'>
              <span id='ProductCountDesktop'>
                {%- if collection.results_count -%}
                  {{
                    'templates.search.results_with_count'
                    | t: terms: collection.terms, count: collection.results_count
                  }}
                {%- elsif collection.products_count == collection.all_products_count -%}
                  {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                {%- else -%}
                  {{
                    'products.facets.product_count'
                    | t: product_count: collection.products_count, count: collection.all_products_count
                  }}
                {%- endif -%}
              </span>
            </h2>
            {%- render 'loading-spinner' -%}
          </div>
        </form>
      </facet-filters-form>
    {%- endif -%}

    <div class='{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}'>
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src='{{ 'facets.js' | asset_url }}' defer='defer'></script>
      {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
        <aside
          aria-labelledby='verticalTitle'
          class='facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}'
          id='main-collection-filters'
          data-id='{{ section.id }}'
        >
          {% render 'facets',
            results: collection,
            enable_filtering: section.settings.enable_filtering,
            enable_sorting: section.settings.enable_sorting,
            filter_type: section.settings.filter_type,
            paginate: paginate
          %}
        </aside>
      {%- endif -%}

      <div
        class='product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}'
        id='ProductGridContainer'
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class='collection collection--empty page-width' id='product-grid' data-id='{{ section.id }}'>
            <div class='loading-overlay gradient'></div>
            <div class='title-wrapper center'>
              <h2 class='title title--primary'>
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div
            class='collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}'
          >
            <div class='loading-overlay gradient'></div>
            <div id='Results'></div>
            <script>
              $g.load({
                page_context: {
                  currency_id: window.theme.country_code,
                },
                template: {
                  id: 'category',
                  target: '#Results',
                  sub_templates: [
                    {
                      id: 'sort_and_filters_html', // the id given to the capture in the graphene templates
                      target: '.shop-filters', // the target selector to push the HTML into
                    },
                  ],
                },
              });
            </script>

            <!-- Swiper CSS and JS for GrapheneHC Carousels -->
            <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/Swiper/11.0.5/swiper-bundle.min.css'>
            <script src='https://cdnjs.cloudflare.com/ajax/libs/Swiper/11.0.5/swiper-bundle.min.js'></script>
            {{ 'component-card-media-carousel.css' | asset_url | stylesheet_tag }}
            {{ 'quick-add.css' | asset_url | stylesheet_tag }}
            <script src='{{ 'swatch-quick-add.js' | asset_url }}' defer='defer'></script>

            <!-- GrapheneHC Carousel Manager -->
            <script>
              (function () {
                'use strict';

                console.log('🎠 GrapheneHC Carousel Manager Loading...');

                // Wait for Swiper to load with multiple fallback strategies
                function waitForSwiper(callback, attempts = 0, maxAttempts = 20) {
                  if (window.Swiper && typeof window.Swiper === 'function') {
                    console.log('✅ Swiper loaded successfully');
                    callback();
                    return;
                  }

                  if (attempts >= maxAttempts) {
                    console.error('❌ Failed to load Swiper after max attempts');
                    return;
                  }

                  console.log(`🔍 Swiper check attempt ${attempts + 1}: ${typeof window.Swiper}`);

                  // Try alternative CDN at attempt 10
                  if (attempts === 10) {
                    console.log('🔄 Trying alternative Swiper CDN...');
                    const script = document.createElement('script');
                    script.src = 'https://unpkg.com/swiper@11/swiper-bundle.min.js';
                    script.onload = () => {
                      console.log('✅ Alternative Swiper CDN loaded');
                    };
                    document.head.appendChild(script);
                  }

                  setTimeout(() => waitForSwiper(callback, attempts + 1, maxAttempts), 300);
                }

                // Card Media Carousel Manager
                class GrapheneCarouselManager {
                  constructor() {
                    this.carousels = new Map();
                    this.observer = null;
                    console.log('📝 GrapheneCarouselManager instance created');
                  }

                  init() {
                    // Wait for Swiper, then start watching for content
                    waitForSwiper(() => {
                      console.log('🚀 Starting GrapheneHC content monitoring...');
                      this.startContentMonitoring();
                      this.setupExistingCarousels();
                    });
                  }

                  startContentMonitoring() {
                    // Watch for changes in the #Results div
                    const resultsDiv = document.getElementById('Results');
                    if (!resultsDiv) {
                      console.log('⚠️ #Results div not found, retrying...');
                      setTimeout(() => this.startContentMonitoring(), 1000);
                      return;
                    }

                    console.log('👀 Monitoring #Results for GrapheneHC content...');

                    // Create mutation observer to watch for new content
                    this.observer = new MutationObserver((mutations) => {
                      let hasNewCarousels = false;

                      mutations.forEach((mutation) => {
                        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                          mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === 1) {
                              // Element node
                              if (
                                node.classList?.contains('card-media-carousel') ||
                                node.querySelector?.('.card-media-carousel')
                              ) {
                                hasNewCarousels = true;
                              }
                            }
                          });
                        }
                      });

                      if (hasNewCarousels) {
                        console.log('🎠 New carousel content detected!');
                        setTimeout(() => this.setupExistingCarousels(), 100);
                      }
                    });

                    this.observer.observe(resultsDiv, {
                      childList: true,
                      subtree: true,
                    });
                  }

                  setupExistingCarousels() {
                    const carouselElements = document.querySelectorAll('.card-media-carousel.has-multiple-media');
                    console.log(`🔍 Found ${carouselElements.length} carousel elements to set up`);

                    carouselElements.forEach((carouselElement, index) => {
                      console.log(`🎠 Setting up carousel ${index + 1}/${carouselElements.length}`);
                      this.setupCarousel(carouselElement);
                    });

                    console.log(`✅ Carousel setup complete: ${this.carousels.size} carousels initialized`);
                  }

                  setupCarousel(carouselElement) {
                    const productId = carouselElement.getAttribute('data-product-id');
                    const cardId = carouselElement.getAttribute('data-card-id');
                    const carouselId = `${cardId}-${productId}`;

                    // Check if already initialized
                    if (this.carousels.has(carouselId)) {
                      return;
                    }

                    const swiperElement = carouselElement.querySelector('.card-slider.swiper');
                    const hasMultipleMedia = carouselElement.classList.contains('has-multiple-media');

                    if (!swiperElement) {
                      return;
                    }

                    // Get navigation elements
                    const prevButton = carouselElement.querySelector('.card-slider-button--prev');
                    const nextButton = carouselElement.querySelector('.card-slider-button--next');
                    const dots = carouselElement.querySelectorAll('.card-slider-dot');

                    // Capture manager reference for callbacks
                    const manager = this;

                    // Initialize Swiper with debugging
                    console.log(`🎯 Initializing Swiper for carousel: ${carouselId}`);

                    let swiper;
                    try {
                      swiper = new window.Swiper(swiperElement, {
                        slidesPerView: 1,
                        spaceBetween: 0,
                        loop: hasMultipleMedia && carouselElement.querySelectorAll('.swiper-slide').length > 1,
                        touchRatio: hasMultipleMedia ? 1 : 0,
                        allowTouchMove: hasMultipleMedia,
                        grabCursor: hasMultipleMedia,
                        resistance: true,
                        resistanceRatio: 0.85,
                        initialSlide: hasMultipleMedia ? 1 : 0,
                        navigation: hasMultipleMedia
                          ? {
                              nextEl: nextButton,
                              prevEl: prevButton,
                            }
                          : false,
                        pagination:
                          hasMultipleMedia && dots.length > 0
                            ? {
                                el: carouselElement.querySelector('.card-slider-dots'),
                                clickable: true,
                                bulletClass: 'card-slider-dot',
                                bulletActiveClass: 'card-slider-dot--active',
                                renderBullet: function (index, className) {
                                  return `<button type="button" class="${className}" aria-label="Go to slide ${
                                    index + 1
                                  }"></button>`;
                                },
                              }
                            : false,
                        on: {
                          slideChange: function () {
                            manager.updateButtonStates(carouselId, this);
                          },
                        },
                      });
                      console.log(`✅ Swiper initialized successfully for ${carouselId}`);
                    } catch (error) {
                      console.error(`❌ Failed to initialize Swiper for ${carouselId}:`, error);
                      return;
                    }

                    // Store carousel state
                    const state = {
                      element: carouselElement,
                      swiper: swiper,
                      prevButton: prevButton,
                      nextButton: nextButton,
                      dots: dots,
                    };

                    this.carousels.set(carouselId, state);

                    // Create swipe zones for better UX
                    this.createSwipeZones(carouselElement, swiper);
                  }

                  createSwipeZones(carouselElement, swiper) {
                    // Create left and right swipe zones
                    const leftZone = document.createElement('div');
                    const rightZone = document.createElement('div');

                    Object.assign(leftZone.style, {
                      position: 'absolute',
                      top: '0',
                      left: '0',
                      width: '30%',
                      height: '100%',
                      zIndex: '5',
                      cursor: 'grab',
                      pointerEvents: 'none',
                    });

                    Object.assign(rightZone.style, {
                      position: 'absolute',
                      top: '0',
                      right: '0',
                      width: '30%',
                      height: '100%',
                      zIndex: '5',
                      cursor: 'grab',
                      pointerEvents: 'none',
                    });

                    // Create center product link zone
                    const productLinkArea = document.createElement('div');
                    Object.assign(productLinkArea.style, {
                      position: 'absolute',
                      top: '0',
                      left: '30%',
                      width: '40%',
                      height: '100%',
                      zIndex: '4',
                      cursor: 'pointer',
                      pointerEvents: 'auto',
                      background: 'transparent',
                    });

                    // Handle click on product link area
                    productLinkArea.addEventListener('click', function (e) {
                      e.preventDefault();
                      e.stopPropagation();
                      const productLink = carouselElement.closest('.card').querySelector('.card__heading a');
                      if (productLink) {
                        window.location.href = productLink.href;
                      }
                    });

                    carouselElement.appendChild(leftZone);
                    carouselElement.appendChild(rightZone);
                    carouselElement.appendChild(productLinkArea);
                  }

                  updateButtonStates(carouselId, swiper) {
                    const state = this.carousels.get(carouselId);
                    if (!state) return;

                    const { prevButton, nextButton, dots } = state;

                    // Update button states
                    if (prevButton) {
                      prevButton.disabled = swiper.isBeginning && !swiper.params.loop;
                    }
                    if (nextButton) {
                      nextButton.disabled = swiper.isEnd && !swiper.params.loop;
                    }

                    // Update dot states
                    if (dots.length > 0) {
                      dots.forEach((dot, index) => {
                        if (index === swiper.realIndex) {
                          dot.classList.add('card-slider-dot--active');
                        } else {
                          dot.classList.remove('card-slider-dot--active');
                        }
                      });
                    }
                  }
                }

                // Initialize the carousel manager
                window.GrapheneCarouselManager = new GrapheneCarouselManager();

                // Start initialization when DOM is ready
                if (document.readyState === 'loading') {
                  document.addEventListener('DOMContentLoaded', () => {
                    window.GrapheneCarouselManager.init();
                  });
                } else {
                  window.GrapheneCarouselManager.init();
                }
              })();
            </script>

            {% comment %}
              <div
                class='collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}'
              >
                <div class='loading-overlay gradient'></div>
                <ul
                  id='product-grid'
                  data-id='{{ section.id }}'
                  class='
                    grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                    grid--{{ section.settings.columns_desktop }}-col-desktop
                    {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
                  '
                >
                  {% assign skip_card_product_styles = false %}
                  {%- for product in collection.products -%}
                    {% assign lazy_load = false %}
                    {%- if forloop.index > 2 -%}
                      {%- assign lazy_load = true -%}
                    {%- endif -%}
                    <li
                      class='grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}'
                      {% if settings.animations_reveal_on_scroll %}
                        data-cascade
                        style='--animation-order: {{ forloop.index }};'
                      {% endif %}
                    >
                      {% render 'card-product',
                        card_product: product,
                        media_aspect_ratio: section.settings.image_ratio,
                        image_shape: section.settings.image_shape,
                        show_secondary_image: section.settings.show_secondary_image,
                        show_vendor: section.settings.show_vendor,
                        show_rating: section.settings.show_rating,
                        show_swatches: section.settings.show_swatches,
                        lazy_load: lazy_load,
                        skip_styles: skip_card_product_styles,
                        quick_add: section.settings.quick_add,
                        section_id: section.id
                      %}
                    </li>
                    {%- assign skip_card_product_styles = true -%}
                  {%- endfor -%}
                </ul>

                {%- if paginate.pages > 1 -%}
                  {% render 'pagination', paginate: paginate, anchor: '' %}
                {%- endif -%}
              </div>
            {% endcomment %}

            {%- if paginate.pages > 1 -%}
              {% render 'pagination', paginate: paginate, anchor: '' %}
            {%- endif -%}
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {{ 'mask-arch.svg' | inline_asset_content }}
  {%- endif -%}
</div>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
      "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
    },
    {
      "type": "checkbox",
      "id": "show_swatches",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_swatches.label"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
