{% comment %}
  <script>
  window.needToInjectNvd = true;
  const injectNvdToCart = () => {
    const parent = document.querySelector('.rebuy-cart__flyout-footer');
    const nvdContainer = document.querySelector('.rebuy-cart__flyout-actions');

    if (!nvdContainer) return;

    const nvdDiv = document.createElement('div');
    nvdDiv.setAttribute('class', 'nvd-mini w-nvd-100');

    if (parent && !parent.innerHTML.includes('nvd-mini')) {
      nvdContainer.parentNode.insertBefore(nvdDiv, nvdContainer);
    }
  };

  window.addEventListener('click', (ev) => {
    setTimeout(injectNvdToCart, 500);
  }, true);

  </script>
{% endcomment %}
<style>
  div#nvd-standard-widget-container {
    /* max-width: unset !important; */
  }
</style>

<!-- navidium script start -->
<script>
  const nvdShop = 'alex-crane-store.myshopify.com';
  const nvdShopCurrency = '{{ shop.money_format | strip_html }}';
  const nvdControls = {
    subtotal_item: '.rebuy-cart__flyout-subtotal-amount,section.order-subtotal span',
    CheckoutBtns: '.rebuy-checkout,.rebuy-checkout *,[name="checkout"],[name="checkout"] *',
    clickTriggers:
      '[name="add"],[name="add"] *,[href="/cart"],[href="/cart"] *,.rebuy-button,.rebuy-button *,.rebuy-cart__flyout-item-quantity-widget-button,.rebuy-cart__flyout-item-quantity-widget-button *,.rebuy-cart__flyout-item-remove,.rebuy-cart__flyout-item-remove *,.remove,.remove *',
    changeTrigger: '.rebuy-cart__flyout-item-quantity-widget-button',
    cursorControl: '.nvd-mini',
    showConsoleMessage: false,
    iosDeviceListener: 'click',
    trackWidget: false,
    forceClick: true,
    forceCheckout: true,
    redirectCheckout: {
      upsaleOff: true,
      noProtection: false,
    },
  };
</script>
<!-- <script  src="https://d10pwglna6up6p.cloudfront.net/navidium-widgets/js/nvd-js-asset.js"></script> -->
<script>
  // Load Navidium script with local development detection and error handling
  (function () {
    const isLocalDev = window.location.hostname === '127.0.0.1' || window.location.hostname === 'localhost';

    if (isLocalDev) {
      console.warn('[Navidium] Skipping Navidium load on local development server to prevent jQuery dependency errors');
      // Create fallback nvd_init function for local development
      window.nvd_init = function () {
        console.log('[Navidium] Local development stub nvd_init called');
      };
      return;
    }

    // Production loading with error handling
    const script = document.createElement('script');
    script.src = 'https://d10pwglna6up6p.cloudfront.net/navidium-widgets/js/nvd-widget-v-jquery.js';
    script.defer = true;
    script.onerror = function () {
      console.warn('[Navidium] Failed to load Navidium script, creating fallback');
      // Create a fallback nvd_init function
      window.nvd_init = function () {
        console.log('[Navidium] Fallback nvd_init called');
      };
    };
    document.head.appendChild(script);
  })();
</script>
<!-- navidium script end -->
<style>
  .d-flexCstm-ld {
    /* max-width: 100% !important; */
    width: 100%;
    margin: 0 auto;
  }

  div#nvd-widget-cart {
    width: 100%;
  }

  div#nvd-widget-cart {
    margin-top: 0;
  }

  .d-flexCstm-ld {
    margin-bottom: 0 !important;
  }
  .d-flexCstm-ld {
    gap: 14px;
  }
  .rebuy-cart__flyout-integration .nvd-mini:nth-child(2) {
    display: none;
  }
</style>

<script>
  const injectNvdToRebuy = () => {
    if (document?.querySelector('.rebuy-cart__flyout-integration .nvd-mini')) return;
    const parent = document?.querySelector('.rebuy-cart__flyout-integration');
    const nvdDiv = document.createElement('div');
    nvdDiv.setAttribute('class', 'nvd-mini');
    if (!parent?.innerHTML.includes('nvd-mini')) {
      parent.appendChild(nvdDiv);
    }
  };

  const observeCartChanges = () => {
    const targetNode = document.body;

    const config = { childList: true, subtree: true };

    const callback = (mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'childList') {
          // Replace with target element (rebuy/dynamatic/upcart or others)
          if (document.querySelector('.rebuy-cart__flyout-integration')) {
            injectNvdToRebuy();
          }
        }
      }
    };

    const observer = new MutationObserver(callback);
    observer.observe(targetNode, config);
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeCartChanges);
  } else {
    observeCartChanges();
  }

  // Safe nvd_init caller with error handling
  function safeNvdInit() {
    if (typeof nvd_init === 'function') {
      try {
        nvd_init();
      } catch (error) {
        console.warn('[Navidium] nvd_init error:', error);
      }
    } else {
      console.warn('[Navidium] nvd_init function not available yet');
    }
  }

  document.addEventListener('rebuy:smartcart.ready', (event) => {
    setTimeout(safeNvdInit, 300);
  });
  document.addEventListener('rebuy:smartcart.show', (event) => {
    setTimeout(safeNvdInit, 300);
  });
  document.addEventListener('rebuy:cart.change', (event) => {
    setTimeout(safeNvdInit, 300);
  });
  document.addEventListener('rebuy:cart.add', (event) => {
    setTimeout(safeNvdInit, 300);
  });

  // Function to remove trailing zeros from price
  function formatPriceWithoutTrailingZeros(priceText) {
    // Match patterns like $8.00, $12.50, etc.
    return priceText.replace(/(\$\d+)\.00\b/g, '$1').replace(/(\$\d+\.\d*?)0+\b/g, '$1');
  }

  // Observer to format shipping protection prices without trailing zeros
  function observeShippingPriceChanges() {
    const targetSelectors = ['.shipping-protection-price-ld', '.nvd-mini .shipping-protection-price'];

    const formatPriceElements = () => {
      targetSelectors.forEach((selector) => {
        const elements = document.querySelectorAll(selector);
        elements.forEach((element) => {
          if (element.textContent && element.textContent.includes('$')) {
            const originalText = element.textContent;
            const formattedText = formatPriceWithoutTrailingZeros(originalText);
            if (originalText !== formattedText) {
              element.textContent = formattedText;
              console.log(`[Navidium] Formatted price: ${originalText} â†’ ${formattedText}`);
            }
          }
        });
      });
    };

    // Create observer for price changes
    const priceObserver = new MutationObserver((mutations) => {
      let shouldFormat = false;
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' || mutation.type === 'characterData') {
          // Check if any of our target elements were affected
          const target = mutation.target;
          if (target.nodeType === Node.TEXT_NODE) {
            const parent = target.parentElement;
            if (parent && targetSelectors.some((selector) => parent.matches(selector))) {
              shouldFormat = true;
            }
          } else if (target.nodeType === Node.ELEMENT_NODE) {
            if (targetSelectors.some((selector) => target.matches(selector) || target.querySelector(selector))) {
              shouldFormat = true;
            }
          }
        }
      });

      if (shouldFormat) {
        setTimeout(formatPriceElements, 50); // Small delay to ensure DOM is updated
      }
    });

    // Observe the entire nvd-mini container and document body for changes
    const observeTargets = [document.body];
    const nvdContainers = document.querySelectorAll('.nvd-mini');
    nvdContainers.forEach((container) => observeTargets.push(container));

    observeTargets.forEach((target) => {
      priceObserver.observe(target, {
        childList: true,
        subtree: true,
        characterData: true,
      });
    });

    // Initial format attempt
    setTimeout(formatPriceElements, 1000);

    console.log('[Navidium] Price formatting observer initialized');
  }

  // Start observing price changes
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeShippingPriceChanges);
  } else {
    observeShippingPriceChanges();
  }

  // Also format prices when Navidium widgets are initialized
  document.addEventListener('rebuy:smartcart.ready', () => {
    setTimeout(observeShippingPriceChanges, 500);
  });
</script>
