{%- comment -%}
  Colorsets Swatches Initialization

  This snippet initializes the colorsets swatches system.
  Include this after the colorsets.liquid snippet and before the closing </body> tag.

  Usage:
  {% render 'colorsets-swatches-init' %}
{%- endcomment -%}

{%- unless request.design_mode -%}
  <script src='{{ 'colorsets-swatches.js' | asset_url }}' defer></script>

  <script>
    // Additional initialization for specific integrations
    document.addEventListener('DOMContentLoaded', function () {
      // Rebuy integration - refresh swatches when Rebuy content loads
      if (window.rebuy) {
        const originalRender = window.rebuy.render;
        window.rebuy.render = function () {
          originalRender.apply(this, arguments);
          setTimeout(() => {
            if (window.ColorsetSwatches && window.ColorsetSwatches.isInitialized) {
              window.ColorsetSwatches.refresh();
            }
          }, 500);
        };
      }

      // GrapheneHC integration - refresh swatches when GrapheneHC content loads
      document.addEventListener('graphene:loaded', function () {
        setTimeout(() => {
          if (window.ColorsetSwatches && window.ColorsetSwatches.isInitialized) {
            console.log('ðŸŽ¨ GrapheneHC content loaded, refreshing swatches...');
            window.ColorsetSwatches.refresh();
          }
        }, 500);
      });

      // Infinite Scroll integration - refresh swatches when new products load
      document.addEventListener('endlessScroll:loaded', function (event) {
        console.log('ðŸŽ¨ Endless scroll loaded new content, refreshing swatches...');
        if (window.ColorsetSwatches && window.ColorsetSwatches.isInitialized) {
          setTimeout(() => {
            window.ColorsetSwatches.refresh();
          }, 300);
        }
      });

      // Monitor for EndlessScroll initialization and hook into it
      const checkEndlessScroll = () => {
        if (window.endlessScroll && typeof window.endlessScroll.refresh === 'function') {
          console.log('ðŸŽ¨ Found EndlessScroll instance, setting up integration...');

          // Store original methods if they exist
          if (window.endlessScroll.loadMore && !window.endlessScroll._colorsetHooked) {
            const originalLoadMore = window.endlessScroll.loadMore.bind(window.endlessScroll);
            window.endlessScroll.loadMore = async function (...args) {
              const result = await originalLoadMore(...args);
              console.log('ðŸŽ¨ EndlessScroll loadMore completed, refreshing swatches...');
              if (window.ColorsetSwatches && window.ColorsetSwatches.isInitialized) {
                setTimeout(() => {
                  window.ColorsetSwatches.refresh();
                }, 500);
              }
              return result;
            };
            window.endlessScroll._colorsetHooked = true;
          }
        } else {
          // Check again in a bit
          setTimeout(checkEndlessScroll, 1000);
        }
      };

      // Start checking for EndlessScroll
      setTimeout(checkEndlessScroll, 2000);

      // Generic AJAX content loading - refresh swatches on common events
      const refreshEvents = ['DOMNodeInserted', 'ajaxComplete', 'load'];
      refreshEvents.forEach((eventName) => {
        document.addEventListener(eventName, function () {
          if (window.ColorsetSwatches && window.ColorsetSwatches.isInitialized) {
            clearTimeout(window.colorsetRefreshTimeout);
            window.colorsetRefreshTimeout = setTimeout(() => {
              window.ColorsetSwatches.refresh();
            }, 300);
          }
        });
      });
    });
  </script>
{%- endunless -%}
